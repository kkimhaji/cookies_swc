{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\n\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\n\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const writePost = createAction(WRITE_POST, ({\n  title,\n  body,\n  tags\n}) => ({\n  title,\n  body,\n  tags\n}));\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const updatePost = createAction(UPDATE_POST, ({\n  id,\n  title,\n  body,\n  tags\n}) => ({\n  id,\n  title,\n  body,\n  tags\n})); // saga 생성\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  // initialState를 넣으면 초기상태로 바뀜\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => ({ ...state,\n    [key]: value // 특정 key 값을 업데이트\n\n  }),\n  [WRITE_POST]: state => ({ ...state,\n    // post와 postError를 초기화\n    post: null,\n    postError: null\n  }),\n  // 포스트 작성 성공\n  [WRITE_POST_SUCCESS]: (state, {\n    payload: post\n  }) => ({ ...state,\n    post\n  }),\n  // 포스트 작성 실패\n  [WRITE_POST_FAILURE]: (state, {\n    payload: postError\n  }) => ({ ...state,\n    postError\n  }),\n  [SET_ORIGINAL_POST]: (state, {\n    payload: post\n  }) => ({ ...state,\n    title: post.title,\n    body: post.body,\n    tags: post.tags,\n    originalPostId: post._id\n  }),\n  [UPDATE_POST_SUCCESS]: (state, {\n    payload: post\n  }) => ({ ...state,\n    post\n  }),\n  [UPDATE_POST_FAILURE]: (state, {\n    payload: postError\n  }) => ({ ...state,\n    postError\n  })\n}, initialState);\nexport default write;","map":{"version":3,"sources":["/home/stanaly/project/newproject/blog-frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","changeField","key","value","writePost","title","body","tags","setOriginalPost","post","updatePost","id","writePostSaga","updatePostSaga","writeSaga","initialState","postError","originalPostId","write","state","payload","_id"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst [\n  WRITE_POST,\n  WRITE_POST_SUCCESS,\n  WRITE_POST_FAILURE,\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\n  title,\n  body,\n  tags,\n}));\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({ id, title, body, tags }) => ({\n    id,\n    title,\n    body,\n    tags,\n  }),\n);\n\n// saga 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\n\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_POST]: state => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\n      ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n"]},"metadata":{},"sourceType":"module"}